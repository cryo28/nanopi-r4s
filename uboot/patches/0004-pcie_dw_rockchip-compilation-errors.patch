From 6748543e4a5ac69897266d1f0426195b9129bdb3 Mon Sep 17 00:00:00 2001
From: John Clark <inindev@gmail.com>
Date: Sat, 3 Jul 2021 23:50:00 +0000
Subject: [PATCH] arm64: rk3399: pcie_dw_rockchip compilation errors

---
 drivers/pci/pcie_dw_rockchip.c | 22 +++++++++-------------
 1 file changed, 9 insertions(+), 13 deletions(-)

diff --git a/drivers/pci/pcie_dw_rockchip.c b/drivers/pci/pcie_dw_rockchip.c
index 77f1a1b48f..72d7635d45 100644
--- a/drivers/pci/pcie_dw_rockchip.c
+++ b/drivers/pci/pcie_dw_rockchip.c
@@ -127,13 +127,13 @@ struct rk_pcie {
 #define LINK_WAIT_IATU_US		10000
 
 /* Parameters for the waiting for #perst signal */
-#define PERST_WAIT_MS			1000
+#define MACRO_US			1000
 
 static int rk_pcie_read(void __iomem *addr, int size, u32 *val)
 {
 	if ((uintptr_t)addr & (size - 1)) {
 		*val = 0;
-		return PCIBIOS_UNSUPPORTED;
+		return -EOPNOTSUPP;
 	}
 
 	if (size == 4) {
@@ -153,7 +153,7 @@ static int rk_pcie_read(void __iomem *addr, int size, u32 *val)
 static int rk_pcie_write(void __iomem *addr, int size, u32 val)
 {
 	if ((uintptr_t)addr & (size - 1))
-		return PCIBIOS_UNSUPPORTED;
+		return -EOPNOTSUPP;
 
 	if (size == 4)
 		writel(val, addr);
@@ -266,8 +266,6 @@ static inline void rk_pcie_dbi_write_enable(struct rk_pcie *rk_pcie, bool en)
  */
 static void rk_pcie_setup_host(struct rk_pcie *rk_pcie)
 {
-	u32 val;
-
 	rk_pcie_dbi_write_enable(rk_pcie, true);
 
 	/* setup RC BARs */
@@ -294,7 +292,7 @@ static void rk_pcie_setup_host(struct rk_pcie *rk_pcie)
 	/* Better disable write permission right after the update */
 
 	setbits_le32(rk_pcie->dbi_base + PCIE_LINK_WIDTH_SPEED_CONTROL,
-		     PORT_LOGIC_SPEED_CHANGE)
+		     PORT_LOGIC_SPEED_CHANGE);
 
 	rk_pcie_dbi_write_enable(rk_pcie, false);
 }
@@ -309,8 +307,6 @@ static void rk_pcie_setup_host(struct rk_pcie *rk_pcie)
  */
 static void rk_pcie_configure(struct rk_pcie *pci, u32 cap_speed)
 {
-	u32 val;
-
 	rk_pcie_dbi_write_enable(pci, true);
 
 	clrsetbits_le32(pci->dbi_base + PCIE_LINK_CAPABILITY,
@@ -629,7 +625,7 @@ static int rk_pcie_link_up(struct rk_pcie *priv, u32 cap_speed)
 		 * some wired devices need much more, such as 600ms.
 		 * Add a enough delay to cover all cases.
 		 */
-		msleep(PERST_WAIT_MS);
+		udelay(MACRO_US * 1000);
 		dm_gpio_set_value(&priv->rst_gpio, 1);
 	}
 
@@ -651,12 +647,12 @@ static int rk_pcie_link_up(struct rk_pcie *priv, u32 cap_speed)
 		dev_info(priv->dev, "PCIe Linking... LTSSM is 0x%x\n",
 			 rk_pcie_readl_apb(priv, PCIE_CLIENT_LTSSM_STATUS));
 		rk_pcie_debug_dump(priv);
-		msleep(1000);
+		udelay(MACRO_US * 1000);
 	}
 
 	dev_err(priv->dev, "PCIe-%d Link Fail\n", dev_seq(priv->dev));
 	/* Link maybe in Gen switch recovery but we need to wait more 1s */
-	msleep(1000);
+	udelay(MACRO_US * 1000);
 	return -EIO;
 }
 
@@ -676,7 +672,7 @@ static int rockchip_pcie_init_port(struct udevice *dev)
 		}
 	}
 
-	msleep(1000);
+	udelay(MACRO_US * 1000);
 
 	ret = generic_phy_init(&priv->phy);
 	if (ret) {
@@ -795,7 +791,7 @@ static int rockchip_pcie_probe(struct udevice *dev)
 	struct rk_pcie *priv = dev_get_priv(dev);
 	struct udevice *ctlr = pci_get_controller(dev);
 	struct pci_controller *hose = dev_get_uclass_priv(ctlr);
-	int reti = 0;
+	int ret = 0;
 
 	priv->first_busno = dev_seq(dev);
 	priv->dev = dev;
-- 
2.20.1

