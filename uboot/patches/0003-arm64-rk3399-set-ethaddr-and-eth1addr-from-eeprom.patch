From 610092d84ffa2e0e05b310d0e3e1dd4924064fe0 Mon Sep 17 00:00:00 2001
From: John Clark <inindev@gmail.com>
Date: Mon, 4 Jul 2022 16:06:08 -0400
Subject: [PATCH 3/3] arm64: rk3399: set ethaddr and eth1addr from eeprom

Signed-off-by: John Clark <inindev@gmail.com>
---
 arch/arm/mach-rockchip/misc.c       | 34 ++++++++++++++++++-----------
 configs/nanopi-r4s-rk3399_defconfig |  1 +
 2 files changed, 22 insertions(+), 13 deletions(-)

diff --git a/arch/arm/mach-rockchip/misc.c b/arch/arm/mach-rockchip/misc.c
index 87eebd9872..a65c786e5b 100644
--- a/arch/arm/mach-rockchip/misc.c
+++ b/arch/arm/mach-rockchip/misc.c
@@ -12,7 +12,7 @@
 #include <common.h>
 #include <env.h>
 #include <dm.h>
-#include <hash.h>
+#include <i2c.h>
 #include <log.h>
 #include <dm/uclass-internal.h>
 #include <misc.h>
@@ -25,33 +25,41 @@ int rockchip_setup_macaddr(void)
 {
 #if CONFIG_IS_ENABLED(CMD_NET)
 	int ret;
-	const char *cpuid = env_get("cpuid#");
-	u8 hash[SHA256_SUM_LEN];
-	int size = sizeof(hash);
+	struct udevice *bus;
+	struct udevice *dev;
 	u8 mac_addr[6];
 
 	/* Only generate a MAC address, if none is set in the environment */
 	if (env_get("ethaddr"))
 		return 0;
 
-	if (!cpuid) {
-		debug("%s: could not retrieve 'cpuid#'\n", __func__);
+	ret = uclass_get_device_by_name(UCLASS_I2C, "i2c@ff120000", &bus);
+	if (ret) {
+		debug("%s: uclass_get_device_by_name failed: %d\n", __func__, ret);
 		return -1;
 	}
 
-	ret = hash_block("sha256", (void *)cpuid, strlen(cpuid), hash, &size);
+	ret = dm_i2c_probe(bus, 0x51, 0, &dev);
 	if (ret) {
-		debug("%s: failed to calculate SHA256\n", __func__);
+		debug("%s: dm_i2c_probe failed: %d\n", __func__, ret);
 		return -1;
 	}
 
-	/* Copy 6 bytes of the hash to base the MAC address on */
-	memcpy(mac_addr, hash, 6);
+	ret = dm_i2c_read(dev, 0xfa, mac_addr, sizeof(mac_addr));
+	if (ret) {
+		debug("%s: dm_i2c_read failed: %d\n", __func__, ret);
+		return -1;
+	}
 
-	/* Make this a valid MAC address and set it */
-	mac_addr[0] &= 0xfe;  /* clear multicast bit */
-	mac_addr[0] |= 0x02;  /* set local assignment bit (IEEE802) */
+	/* ethaddr: wan */
+	mac_addr[5] &= 0xfe;
+	debug("%s: setting ethaddr: %02x %02x %02x %02x %02x %02x\n", __func__, mac_addr[0], mac_addr[1], mac_addr[2], mac_addr[3], mac_addr[4], mac_addr[5]);
 	eth_env_set_enetaddr("ethaddr", mac_addr);
+
+	/* eth1addr: lan */
+	mac_addr[5] |= 0x01;
+	debug("%s: setting eth1addr: %02x %02x %02x %02x %02x %02x\n", __func__, mac_addr[0], mac_addr[1], mac_addr[2], mac_addr[3], mac_addr[4], mac_addr[5]);
+	eth_env_set_enetaddr("eth1addr", mac_addr);
 #endif
 	return 0;
 }
diff --git a/configs/nanopi-r4s-rk3399_defconfig b/configs/nanopi-r4s-rk3399_defconfig
index d769d9c79e..7369ea3de3 100644
--- a/configs/nanopi-r4s-rk3399_defconfig
+++ b/configs/nanopi-r4s-rk3399_defconfig
@@ -14,6 +14,7 @@ CONFIG_SYS_LOAD_ADDR=0x800800
 CONFIG_DEFAULT_FDT_FILE="rockchip/rk3399-nanopi-r4s.dtb"
 CONFIG_CONSOLE_MUX=y
 CONFIG_DISPLAY_BOARDINFO_LATE=y
+CONFIG_MISC_INIT_R=y
 # CONFIG_SPL_RAW_IMAGE_SUPPORT is not set
 CONFIG_SPL_STACK_R=y
 CONFIG_SPL_STACK_R_MALLOC_SIMPLE_LEN=0x10000
-- 
2.30.2

